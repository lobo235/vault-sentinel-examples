import "strings"

# Function to get secret name from path
get_secret_name = func() {
    path_parts = strings.split(request.path, "/")
    print("Path parts:", path_parts)
    return path_parts[-1]
}

# Function to check if a field exists in the custom_metadata collection
only_one_secret_key = func() {
    if "data" in keys(request.data) and length(request.data.data else 0) == 1 {
        return true
    }
    print("***** Only one key is allowed per secret *****")
    return false
}

# Function to only allow a certain set of fields in custom_metadata
secret_key_matches_secret_name = func() {
    if "data" in keys(request.data) and length(request.data.data else 0) > 0 {
        for request.data.data as key, val {
            if key == get_secret_name() {
                return true
            }
        }
    }
    print("***** The secret key must match the secret name", get_secret_name(),"*****")
    return false
}

# Function to validate all the custom_metadata fields we care about
validate_all = func() {
    if only_one_secret_key() and secret_key_matches_secret_name() {
        return true
    } else {
        return false
    }
}

# Only care about create/update operations against kv data paths
precond = rule {
    request.operation in ["create", "update"] and
    strings.has_prefix(request.path, "kv/data/")
}

# Main policy evaluation
main = rule when precond {
    validate_all()
}
