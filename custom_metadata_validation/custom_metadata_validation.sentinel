import "strings"

# Function to validate that a string matches values in a pre-determined list
string_in_list = func(str, list, field_name) {
    if length(str else 0) > 0 {
        if length(list else 0) > 0 {
            if list contains str {
                return true
            } else {
                print("***** ", field_name, " validation failed because \"", str, "\" was not found in list: ", list, " *****")
                return false
            }
        } else {
            error("string_in_list argument \"list\" is empty or unset!")
        }
    } else {
        error("string_in_list argument \"str\" is empty or unset!")
    }
    return false
}

# Function to validate that a string matches a Regular Expression
string_matches_regex = func(str, regex, field_name) {
    if length(str else 0) > 0 {
        if length(regex else 0) > 0 {
            if str matches regex {
                return true
            } else {
                print("***** ", field_name, " validation failed because \"", str, "\" does not match regex: ", regex, " *****")
                return false
            }
        } else {
            error("string_in_list argument \"list\" is empty or unset!")
        }
    } else {
        error("string_matches_regex argument \"str\" is empty or unset!")
    }
    return false
}

# Function to check if a field exists in the custom_metadata collection
custom_metadata_has_field = func(field) {
    if "custom_metadata" in keys(request.data) and length(request.data.custom_metadata else 0) > 0 {
        for request.data.custom_metadata as key, val {
            if key == field {
                return true
            }
        }
    }
    return false
}

# Function to only allow a certain set of fields in custom_metadata
only_allow_fields = func(field_names) {
    validated = true
    if "custom_metadata" in keys(request.data) and length(request.data.custom_metadata else 0) > 0 {
        for request.data.custom_metadata as key, val {
            if key not in field_names {
                print("***** ", key, " not allowed in custom_metadata, allowed keys:", field_names, " *****")
                validated = false
            }
        }
    }
    return validated
}

# Function to validate all the custom_metadata fields we care about
validate_all = func() {
    validated = true
    if not only_allow_fields(["notes", "type", "privileged", "contact", "expiry_date"]) {
        validated = false
    }
    if custom_metadata_has_field("type") {
        validated = string_in_list(request.data.custom_metadata.type, [ "db", "api key", "tls", "token", "jwt", "key" ], "type") and validated
    }
    if custom_metadata_has_field("privileged") {
        validated = string_in_list(request.data.custom_metadata.privileged, [ "yes", "no" ], "privileged") and validated
    }
    if custom_metadata_has_field("contact") {
        validated = string_matches_regex(request.data.custom_metadata.contact, "(\\W|^)[\\w.\\-]{0,25}@(domain\\.com|otherdomain\\.com)(\\W|$)", "contact") and validated
    }
    if custom_metadata_has_field("expiry_date") {
        validated = string_matches_regex(request.data.custom_metadata.expiry_date, "^(0[1-9]|1[1,2])(\\/|-)(0[1-9]|[12][0-9]|3[01])(\\/|-)(20|21|22)\\d{2}$", "expiry_date") and validated
    }
    if validated {
        return true
    } else {
        print ("Custom Metadata validation failed. See http://wiki.bmo.net/custom_metadata_article for more details. *****")
        return false
    }
}

# Only care about create, update, and delete operations against kv metadata paths that include custom_metadata
precond = rule {
    request.operation in ["create", "update"] and
    strings.has_prefix(request.path, "kv/metadata/") and
    "custom_metadata" in keys(request.data)
}

# Main policy evaluation
main = rule when precond {
    validate_all()
}
